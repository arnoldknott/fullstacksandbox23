# Rename this file into .env before putting in your secrets!

# Add all variables as environment variables to the docker container!

# see manual preparation steps for the infrastructure below
# Variables for storing the state file of infrastructure backend:
AZ_RESOURCE_GROUP_NAME=""
AZ_STORAGE_ACCOUNT_NAME=""
AZ_CONTAINER_NAME=""
AZ_BACKEND_STATE_KEY=""


# Variables for
# - authenticating to Azure as provider 
# - authentication to state file backend, and
# - authenticating allowing infrastructure run to access the created resources, like key vault:


AZURE_CLIENT_ID=""
AZURE_CLIENT_SECRET=""
AZURE_SUBSCRIPTION_ID=""
AZURE_TENANT_ID=""

# add the serivce principle object id (of the identity, running tofu), as it is needed to configure access to key vault, for writing secrets from infrastructure code and ownership of app registrations (user exposed and github actions):
DEVELOPER_LOCALHOST_OBJECT_ID=""
MANAGED_IDENTITY_GITHUB_ACTIONS_OBJECT_ID=""

# set login to GitHub Container Registry on localhost:
# export CR_PAT = <GET FROM GITHUB SETTINGS - DEVELOPER SETTINGS  - PERSONAL ACCESS TOKEN - TOKEN CLASSIC - SCOPE READ:PACKAGES >
# echo $CR_PAT | docker login ghcr.io -u <GITUB-USERNAME> --password-stdin
# echo CR_PAT=   # Environmental variable can be deleted again right after login in!

#### Variables for the project
# === if changed, make sure to also change them in the github environment variables ===
# project settings:
PROJECT_NAME            = ""
PROJECT_SHORT_NAME      = ""
PROJECT_REPOSITORY_NAME = ""

COSTCENTER = ""
OWNER_NAME = ""

BUDGET_NOTIFICATION_EMAIL = ""

OWNER_OBJECT_ID = ""

# postgres settings:
POSTGRES_PORT=

# cache settings:
REDIS_PORT         =
REDIS_INSIGHT_PORT =
REDIS_SESSION_DB   =

# public ssh key for virtual machine login:
# where the public key is stored on the local machine:
SSH_KEY_PATH_LOCALHOST = ""
# where the key is stored in the container:
PUBLIC_SSH_KEY_PATH = ""


# for creating the storage container:
# reuse this storage account:
# az storage account create --name <...> --resource-group <...> --location <...> --sku <...> --public-network-access enabled
# create a new storage container:
# az storage container create --name <...> --public-access blob --account-name <...> --auth-mode login
# upload existing state files manually to storage account:
# az storage blob upload --account-name <...> --container-name <...> --subscription <...> --file <...> --name <...>env:dev
# az storage blob upload --account-name <...> --container-name <...> --subscription <...> --file <...> --name <...>env:stage
# az storage blob upload --account-name <...> --container-name <...> --subscription <...> --file <...> --name <...>env:prod

# for creating service principle to run infrastructure locally:
# object_id_of_app="<...>" # only required to manually assign "Storage Blob Data Contributor" role to the service principle!
# scope_for_role_assignment="/subscriptions/<...>/resourceGroups/housekeeping/providers/Microsoft.Storage/storageAccounts/<...>/blobServices/default/containers/<...>
# az ad sp create-for-rbac --name <...> --role "Contributor" --scopes /subscriptions/<...>
# az role assignment create --role "Storage Blob Data Contributor" --assignee <...> --scope /subscriptions/<...>/resourceGroups/<...>/providers/Microsoft.Storage/storageAccounts/<...>/blobServices/default/containers/<...>
# az role assignment create --role "User Access Administrator" --assignee <...> --scope /subscriptions/<...>/resourceGroups/<...>-dev
# az role assignment create --role "User Access Administrator" --assignee <...> --scope /subscriptions/<...>/resourceGroups/<...>-stage
# az role assignment create --role "User Access Administrator" --assignee <...> --scope /subscriptions/<...>/resourceGroups/<...>-prod


# for creating the managed identity for the cloud:
# az identity create \
#   -n <...> \
#   -g <...> \
#   -l <...> \
#   --tags "<...>" "<...>"
# Federated credentials for the github repository to log into azure via managed identity, e.g. without credentials (suc h as password or certificate):
# az identity federated-credential create \
#   --identity-name <...> \
#   --name "<..<...> \
#   -g <...> \
#   --<...> "api:<...>" \
#   --issue<...>://token.actions.githubusercontent.com" \
#   --subject "repo:<...>:environment:infrastructure"
# az identity federated-credential create \
#   --identity-name <...> \
#   --name "<...>-ap<...>" \
#   -g house<...> \
#   --<...> "api:<...>" \
#   --issue<...>://token.actions.githubusercontent.com" \
#   --subject "repo:<...>:environment:infrastructure-apply"
# Assign "Contributor" role to the managed identity on subscription level - needs to be able to create resources, such as resource groups within the subscription:
# az role assignment create \
#   --role "Contributor" \
#   --assignee <...> \ # note: this is the principle_id of the managed identity
#   --scope /subscriptions/<...>
# Assign the managed identity to the role "Storage Blob Data Contributor" to the storage account:
# az role assignment create \
#   --role "Storage Blob Data Contributor" \
#   --assignee <...> \ # note: this is the principle_id of the managed identity
#   --scope /subscriptions/<...>/resourceGroups/<...>/providers/Microsoft.Storage/storageAccounts/<...>/blobServices/default/containers/
# az role assignment create \
#   --role "User Access Administrator" \
#   --assignee <...> \
#   --scope /subscriptions/<...>/resourceGroups/<...>-dev
# az role assignment create \
#   --role "User Access Administrator" \
#   --assignee <...> \
#   --scope /subscriptions/<...>/resourceGroups/<...>-stage
# az role assignment create \
#   --role "User Access Administrator" \
#   --assignee <...> \
#   --scope /subscriptions/<...>/resourceGroups/<...>-prod
# Assign Application.ReadWrite.OwnedBy permission
# az ad app permission add --id <...> --api 00000003-0000-0000-c000-000000000000 --api-permissions 7ab1d382-f21e-4acd-a863-ba3e13f7da61=Role
# Assign User.Read.All permission
# az ad app permission add --id <...> --api 00000003-0000-0000-c000-000000000000 --api-permissions e1fe6dd8-ba31-4d61-89e7-88639da4683d=Role
# Grant admin consent for the permissions
# az ad app permission grant --id <...> --api 00000003-0000-0000-c000-000000000000 --consent-type AllPrincipals