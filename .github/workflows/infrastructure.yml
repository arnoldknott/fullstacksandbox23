name: Infrastructure

on:
  push:
    branches:
      - dev
      - stage
      - main
    paths:
      - "infrastructure/**"
      - ".github/workflows/infrastructure.yml"
      - "cache/entrypoint.sh"
      - "cache/redis.conf"
      - "cache/redis-full.conf"
      - "cache/users_template.acl"
      - "!infrastructure/.terraform.lock.hcl"

env:
  ### Configuration for pipeline
  COMMIT_SHA: ${{ github.sha }}
  TOFU_VERSION: 1.10.6
  ### Configuration of backend for infrastructure state:
  AZ_RESOURCE_GROUP_NAME: ${{ secrets.AZ_RESOURCE_GROUP_NAME }}
  AZ_STORAGE_ACCOUNT_NAME: ${{ secrets.AZ_STORAGE_ACCOUNT_NAME }}
  AZ_CONTAINER_NAME: ${{ vars.AZ_CONTAINER_NAME }}
  AZ_BACKEND_STATE_KEY: ${{ vars.AZ_BACKEND_STATE_KEY }}
  ### Backend login and provider configuration:
  # use as managed identity login - comment out for user --device-code login:
  ARM_USE_OIDC: true
  ARM_CLIENT_ID: ${{ secrets.AZURE_GITHUBACTIONSMANAGEDIDENTITY_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  ARM_USE_AZUREAD: true
  # use as user --device-code login but keep also for managed-identity login:
  AZURE_CLIENT_ID: ${{ secrets.AZURE_GITHUBACTIONSMANAGEDIDENTITY_CLIENT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}

jobs:
  plan:
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
      contents: write
    environment: infrastructure
    env:
      # Logging from tofu:
      # TF_LOG: DEBUG
      # Object ID's of all instances running infrastructure script:
      DEVELOPER_LOCALHOST_OBJECT_ID: ${{ secrets.DEVELOPER_LOCALHOST_OBJECT_ID }}
      MANAGED_IDENTITY_GITHUB_ACTIONS_OBJECT_ID: ${{ secrets.AZURE_GITHUBACTIONSMANAGEDIDENTITY_SP_OBJECT_ID }}
      # Project specific variables:
      PROJECT_NAME: ${{ vars.PROJECT_NAME }}
      PROJECT_SHORT_NAME: ${{ vars.PROJECT_SHORT_NAME }}
      PROJECT_REPOSITORY_NAME: ${{ github.repository }}
      COSTCENTER: ${{ secrets.COSTCENTER }}
      OWNER_NAME: ${{ secrets.OWNER_NAME }}
      BUDGET_NOTIFICATION_EMAIL: ${{ secrets.BUDGET_NOTIFICATION_EMAIL }}
      OWNER_OBJECT_ID: ${{ secrets.OWNER_OBJECT_ID }}
      ARM_OBJECT_ID: ${{ secrets.AZURE_GITHUBACTIONSMANAGEDIDENTITY_SP_OBJECT_ID }}
      # Postgres settings:
      POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
      # Redis settings:
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      REDIS_INSIGHT_PORT: ${{ secrets.REDIS_INSIGHT_PORT }}
      # public ssh key for the VM:
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
      PUBLIC_SSH_KEY_PATH: ${{ secrets.PUBLIC_SSH_KEY_PATH }}
    defaults:
      run:
        working-directory: infrastructure
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # # Add in those two steps to run as user instead:
      # - name: Install Azure CLI
      #   run: |
      #     curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      # - name: Login to Azure using device code
      #   run: |
      #     az login --use-device-code --tenant ${{ vars.AZURE_TENANT_ID }} --output none
      #     echo "Logged in to Azure"
      #     az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --output none
      #     echo "Set subscription"

      # Documentation on how to register the managed identity for the GitHub environment "infrastructure":
      # https://registry.terraform.io/providers/hashicorp/azuread/latest/docs/guides/service_principal_configuration
      # manually register an application in Azure AD and assign "Contributor" role to the subscription!
      # az identity create \
      #   -g <resource_group> \
      #   -n <identity_name> \
      #   -l <location> \
      #   --tags <tags>
      # add the repo to the federated credentials of managed identity for the GitHub environemnt "infrastucture":
      # az identity federated-credential create \
      #   --identity-name <identity_name> \ # from above!
      #   --name <federated_credential_name> \
      #   -g <resource_group> \
      #   --audiences "api://AzureADTokenExchange" \
      #   --issuer "https://token.actions.githubusercontent.com" \
      #   --subject "repo:{github_organization}/{github_repository}:{Entity}" # Entity can be (branch:<github_branch_name>, environment:<github_environment_name>, pull_request, ref:refs/tags/<tag_name>)
      # Assign the managed identity to the subscription:
      # az role assignment create \
      #   --role "Contributor" \
      #   --assignee <managed_identity_principle_id> \
      #   --scope /subscriptions/<subscription_id>
      # az role assignment create \
      #   --role "Storage Blob Data Contributor" \
      #   --assignee <managed_identity_principle_id> \
      #   --scope /subscriptions/<subscription_id>/resourceGroups/<resource_group_name>/providers/Microsoft.Storage/storageAccounts/<storage_account_name>/blobServices/default/containers/<container_name>
      # az role assignment create \
      #   --role "User Access Administrator" \
      #   --assignee <managed_identity_principle_id> \
      #   --scope /subscriptions/<subscription_id>/resourceGroups/<resource_group_name>

      - name: Login to Azure using managed identity
        uses: azure/login@v2
        with:
          # use the client_id from above registered identity
          client-id: ${{ secrets.AZURE_GITHUBACTIONSMANAGEDIDENTITY_CLIENT_ID }}
          # delete secrets.AZURE_TENANT_ID in repository!
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set workspace
        run: |
          if [ ${{ github.ref }} == 'refs/heads/dev' ]; then
            echo "WORKSPACE=dev" >> "$GITHUB_ENV"
          elif [ ${{ github.ref }} == 'refs/heads/stage' ]; then
            echo "WORKSPACE=stage" >> "$GITHUB_ENV"
          elif [ ${{ github.ref }} == 'refs/heads/main' ]; then
            echo "WORKSPACE=prod" >> "$GITHUB_ENV"
          else
            echo "This branch does not support infrastructure deployment"
            exit 1
          fi
          echo "WORKSPACE=${WORKSPACE}"
          mkdir ~/.ssh
          echo ${{ secrets.SSH_PUBLIC_KEY }} > ${{ secrets.PUBLIC_SSH_KEY_PATH }}
        # echo "ARM_USE_OIDC=true" >> "$GITHUB_ENV"
        # echo "ARM_CLIENT_ID=${{ secrets.AZURE_GITHUBACTIONSMANAGEDIDENTITY_CLIENT_ID }}" >> "$GITHUB_ENV"
        # echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> "$GITHUB_ENV"
        # echo "ARM_TENANT_ID=${{ vars.AZURE_TENANT_ID }}" >> "$GITHUB_ENV"
        # echo "ARM_USE_AZUREAD=true" >> "$GITHUB_ENV"

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TOFU_VERSION }}

      - name: tofu version & workspace
        run: |
          tofu --version
          echo "$WORKSPACE"

      # set the environment variables for tofu further up where the workspace is set and >> into "$GITHUB_ENV":
      - name: tofu init
        run: |
          tofu init \
            -backend-config="resource_group_name=${AZ_RESOURCE_GROUP_NAME}" \
            -backend-config="storage_account_name=${AZ_STORAGE_ACCOUNT_NAME}" \
            -backend-config="container_name=${AZ_CONTAINER_NAME}" \
            -backend-config="key=${AZ_BACKEND_STATE_KEY}"

      # commit the lock file to the repository - if changed?
      - name: Commit .terraform.lock.hcl file
        uses: EndBug/add-and-commit@v9
        with:
          add: "infrastructure/.terraform.lock.hcl"
          fetch: false
          message: "ci: updates terraform lock file based on workflow run triggered by commit SHA ${{ env.COMMIT_SHA }}."

      - name: tofu workspace select
        run: tofu workspace select -or-create ${WORKSPACE}

      - name: tofu plan
        id: tofu_plan
        run: |
          tofu plan -out=${WORKSPACE}_${COMMIT_SHA}.tfplan \
            -detailed-exitcode \
            -var "azure_client_id=${AZURE_CLIENT_ID}" \
            -var "azure_subscription_id=${AZURE_SUBSCRIPTION_ID}" \
            -var "azure_tenant_id=${AZURE_TENANT_ID}" \
            -var "developer_localhost_object_id=${DEVELOPER_LOCALHOST_OBJECT_ID}" \
            -var "managed_identity_github_actions_object_id=${MANAGED_IDENTITY_GITHUB_ACTIONS_OBJECT_ID}" \
            -var "project_name=${PROJECT_NAME}" \
            -var "project_short_name=${PROJECT_SHORT_NAME}" \
            -var "project_repository_name=${PROJECT_REPOSITORY_NAME}" \
            -var "costcenter=${COSTCENTER}" \
            -var "owner_name=${OWNER_NAME}" \
            -var "budget_notification_email=${BUDGET_NOTIFICATION_EMAIL}" \
            -var "owner_object_id=${OWNER_OBJECT_ID}" \
            -var "postgres_port=${POSTGRES_PORT}" \
            -var "redis_port=${REDIS_PORT}" \
            -var "redis_insight_port=${REDIS_INSIGHT_PORT}" \
            -var "public_ssh_key_path=${PUBLIC_SSH_KEY_PATH}"

      - name: Upload plan file to container
        if: ${{ steps.tofu_plan.outputs.exitcode == 2 }}
        run: |
          az storage blob upload \
            --account-name ${AZ_STORAGE_ACCOUNT_NAME} \
            --container-name ${AZ_CONTAINER_NAME} \
            --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} \
            --file ${WORKSPACE}_${COMMIT_SHA}.tfplan
        # --overwrite=true / add later to allow overwriting the plan file for multiple runs of workflow job

    outputs:
      tofu_plan_exit_code: ${{ steps.tofu_plan.outputs.exitcode }}

  apply:
    needs: plan
    if: ${{ needs.plan.outputs.tofu_plan_exit_code == 2 }}
    runs-on: ubuntu-24.04
    permissions:
      id-token: write
    environment: infrastructure-apply
    defaults:
      run:
        working-directory: infrastructure
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # # Add in those two steps to run as user instead:
      # - name: Install Azure CLI
      #   run: |
      #     curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      # - name: Login to Azure using device code
      #   run: |
      #     az login --use-device-code --tenant ${{ vars.AZURE_TENANT_ID }} --output none
      #     echo "Logged in to Azure"
      #     az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} --output none
      #     echo "Set subscription"

      - name: Login to Azure as managed identity
        uses: azure/login@v2
        with:
          # use the client_id from above registered identity
          client-id: ${{ secrets.AZURE_GITHUBACTIONSMANAGEDIDENTITY_CLIENT_ID }}
          # delete secrets.AZURE_TENANT_ID in repository!
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set workspace
        run: |
          if [ ${{ github.ref }} == 'refs/heads/dev' ]; then
            echo "WORKSPACE=dev" >> "$GITHUB_ENV"
          elif [ ${{ github.ref }} == 'refs/heads/stage' ]; then
            echo "WORKSPACE=stage" >> "$GITHUB_ENV"
          elif [ ${{ github.ref }} == 'refs/heads/main' ]; then
            echo "WORKSPACE=prod" >> "$GITHUB_ENV"
          else
            echo "This branch does not support infrastructure deployment"
            exit 1
          fi
          echo "WORKSPACE=${WORKSPACE}"

      - name: Download plan file from container
        run: |
          az storage blob download \
            --account-name ${AZ_STORAGE_ACCOUNT_NAME} \
            --container-name ${AZ_CONTAINER_NAME} \
            --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }} \
            --name ${WORKSPACE}_${COMMIT_SHA}.tfplan \
            --file ${WORKSPACE}_${COMMIT_SHA}.tfplan

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TOFU_VERSION }}

      - name: tofu init
        run: |
          tofu init \
            -backend-config="resource_group_name=${AZ_RESOURCE_GROUP_NAME}" \
            -backend-config="storage_account_name=${AZ_STORAGE_ACCOUNT_NAME}" \
            -backend-config="container_name=${AZ_CONTAINER_NAME}" \
            -backend-config="key=${AZ_BACKEND_STATE_KEY}"

      - name: tofu workspace select
        run: tofu workspace select ${WORKSPACE}

      - name: tofu apply
        run: tofu apply -auto-approve ${WORKSPACE}_${COMMIT_SHA}.tfplan

      # - name: OpenTofu Output
      #   run: tofu output
